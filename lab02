***main.c***
/* Clock configuration */
#pragma config FNOSC = FRCPLL, POSCMOD = OFF
#pragma config FPLLIDIV = DIV_2, FPLLMUL = MUL_20
#pragma config FPBDIV = DIV_1, FPLLODIV = DIV_2
#pragma config FWDTEN = OFF, JTAGEN = OFF, FSOSCEN = OFF

#include <xc.h>
#include <inttypes.h>
#include "porta_in.h"
#include "portb_out.h"

//enum States {idle, right_travel, left_travel, paddle_action, lose} state;

 

main() {
 const uint8_t num_one = 0x0001;
 uint8_t in, bottom_bits;
 uint16_t out;
 
 porta_in_init();
 portb_out_init();
 //state = idle;

 
 while (1) {
     in = porta_in_read();
     bottom_bits = (in & 0x0F);
     if ((in & 0x0010) == 0x0010) {
         out = ~(num_one << bottom_bits);
     } else {
         out = (num_one << bottom_bits);
     }
     portb_out_write(out);
    
//    switch(state) {
//         case idle:
//             out = 0x80;
//             state = right_travel;
//             break;
//         case right_travel:
//             portb_out_write(out);
//             out >> 1;
//             //if (paddle closes early) state = lose;
//             //else if (!paddle closes early) state = right_travel;
//             //else if (porta_in_read() & 0x01) == 0x01) state = paddle_action;   
//             break;
//         case left_travel:
//             portb_out_write(out);
//             out << 1;
//             //if (paddle closes early) state = lose;
//             //else if (!paddle closes early) state = right_travel;
//             //else if (porta_in_read() & 0x01) == 0x01) state = paddle_action;
//             break;
//         case paddle_action:
//             out = 0x01;
//             break;
//         case lose:
//             break;
//         default:
//             state = idle;
//             break;       
//     }
     
 in = porta_in_read();   //reads the user action
 
 portb_out_write(out); //writes the ouput to the LEDs
 }
}

***porta_in.c***
#include <xc.h>
#include <inttypes.h>
#include "porta_in.h"
void porta_in_init() {
    TRISA = 0x1F;
    ANSELA = 0;
    CNPUA = 0x1F;
}
uint8_t porta_in_read() {
    uint8_t val;
    val = PORTA & 0x1F;
    return val;
}

***porta_in.h***
#ifndef PORTA_IN_H
#define PORTA_IN_H
#include <inttypes.h>
extern void porta_in_init();
extern uint8_t porta_in_read();
#endif



***portb_out.c***
#include <xc.h>
#include <inttypes.h>
#include "portb_out.h"
void portb_out_init() { 
 ANSELB = 0;
 TRISB = 0;
}
void portb_out_write(uint16_t val)
{ 
   LATB = ((val << 2) & 0xE000) | ((val << 1) & 0x0F80  )  | (val & 0x003F);
}

***portb_out.h***
#ifndef PORTB_OUT_H
#define PORTB_OUT_H
#include <inttypes.h>
extern void portb_out_init();
extern void portb_out_write(uint16_t val);
#endif

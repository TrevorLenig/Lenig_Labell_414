/* Clock configuration */
#pragma config FNOSC = FRCPLL, POSCMOD = OFF
#pragma config FPLLIDIV = DIV_2, FPLLMUL = MUL_20
#pragma config FPBDIV = DIV_1, FPLLODIV = DIV_2
#pragma config FWDTEN = OFF, JTAGEN = OFF, FSOSCEN = OFF

#include <xc.h>
#include <inttypes.h>
#include "porta_in.h"
#include "portb_out.h"

//enum States {idle, right_travel, left_travel, paddle_action, lose} state;

 

main() {
 const uint8_t num_one = 0x0001;
 uint8_t in, bottom_bits;
 uint16_t out;
 
 porta_in_init();
 portb_out_init();
 //state = idle;

 
 while (1) {
     in = porta_in_read();
     bottom_bits = (in & 0x0F);
     if ((in & 0x0010) == 0x0010) {
         out = ~(num_one << bottom_bits);
     } else {
         out = (num_one << bottom_bits);
     }
     portb_out_write(out);
    
//    switch(state) {
//         case idle:
//             out = 0x80;
//             state = right_travel;
//             break;
//         case right_travel:
//             portb_out_write(out);
//             out >> 1;
//             //if (paddle closes early) state = lose;
//             //else if (!paddle closes early) state = right_travel;
//             //else if (porta_in_read() & 0x01) == 0x01) state = paddle_action;   
//             break;
//         case left_travel:
//             portb_out_write(out);
//             out << 1;
//             //if (paddle closes early) state = lose;
//             //else if (!paddle closes early) state = right_travel;
//             //else if (porta_in_read() & 0x01) == 0x01) state = paddle_action;
//             break;
//         case paddle_action:
//             out = 0x01;
//             break;
//         case lose:
//             break;
//         default:
//             state = idle;
//             break;       
//     }
     
 in = porta_in_read();   //reads the user action
 
 portb_out_write(out); //writes the ouput to the LEDs
 }
}

#
#  There exist several targets which are by default empty and which can be 
#  used for execution of your targets. These targets are usually executed 
#  before and after some main targets. They are: 
#
#     .build-pre:              called before 'build' target
#     .build-post:             called after 'build' target
#     .clean-pre:              called before 'clean' target
#     .clean-post:             called after 'clean' target
#     .clobber-pre:            called before 'clobber' target
#     .clobber-post:           called after 'clobber' target
#     .all-pre:                called before 'all' target
#     .all-post:               called after 'all' target
#     .help-pre:               called before 'help' target
#     .help-post:              called after 'help' target
#
#  Targets beginning with '.' are not intended to be called on their own.
#
#  Main targets can be executed directly, and they are:
#  
#     build                    build a specific configuration
#     clean                    remove built files from a configuration
#     clobber                  remove all built files
#     all                      build all configurations
#     help                     print help mesage
#  
#  Targets .build-impl, .clean-impl, .clobber-impl, .all-impl, and
#  .help-impl are implemented in nbproject/makefile-impl.mk.
#
#  Available make variables:
#
#     CND_BASEDIR                base directory for relative paths
#     CND_DISTDIR                default top distribution directory (build artifacts)
#     CND_BUILDDIR               default top build directory (object files, ...)
#     CONF                       name of current configuration
#     CND_ARTIFACT_DIR_${CONF}   directory of build artifact (current configuration)
#     CND_ARTIFACT_NAME_${CONF}  name of build artifact (current configuration)
#     CND_ARTIFACT_PATH_${CONF}  path to build artifact (current configuration)
#     CND_PACKAGE_DIR_${CONF}    directory of package (current configuration)
#     CND_PACKAGE_NAME_${CONF}   name of package (current configuration)
#     CND_PACKAGE_PATH_${CONF}   path to package (current configuration)
#
# NOCDDL


# Environment 
MKDIR=mkdir
CP=cp
CCADMIN=CCadmin
RANLIB=ranlib


# build
build: .build-post

.build-pre:
# Add your pre 'build' code here...

.build-post: .build-impl
# Add your post 'build' code here...


# clean
clean: .clean-post

.clean-pre:
# Add your pre 'clean' code here...
# WARNING: the IDE does not call this target since it takes a long time to
# simply run make. Instead, the IDE removes the configuration directories
# under build and dist directly without calling make.
# This target is left here so people can do a clean when running a clean
# outside the IDE.

.clean-post: .clean-impl
# Add your post 'clean' code here...


# clobber
clobber: .clobber-post

.clobber-pre:
# Add your pre 'clobber' code here...

.clobber-post: .clobber-impl
# Add your post 'clobber' code here...


# all
all: .all-post

.all-pre:
# Add your pre 'all' code here...

.all-post: .all-impl
# Add your post 'all' code here...


# help
help: .help-post

.help-pre:
# Add your pre 'help' code here...

.help-post: .help-impl
# Add your post 'help' code here...



# include project implementation makefile
include nbproject/Makefile-impl.mk

# include project make variables
include nbproject/Makefile-variables.mk

#include <xc.h>
#include <inttypes.h>
#include "porta_in.h"
void porta_in_init() {
    TRISA = 0x1F;
    ANSELA = 0;
    CNPUA = 0x1F;
}
uint8_t porta_in_read() {
    uint8_t val;
    val = PORTA & 0x1F;
    return val;
}

#ifndef PORTA_IN_H
#define PORTA_IN_H
#include <inttypes.h>
extern void porta_in_init();
extern uint8_t porta_in_read();
#endif
#include <xc.h>
#include <inttypes.h>
#include "portb_out.h"
void portb_out_init() { 
 ANSELB = 0;
 TRISB = 0;
}
void portb_out_write(uint16_t val)
{ 
   LATB = ((val << 2) & 0xE000) | ((val << 1) & 0x0F80  )  | (val & 0x003F);
}

#ifndef PORTB_OUT_H
#define PORTB_OUT_H
#include <inttypes.h>
extern void portb_out_init();
extern void portb_out_write(uint16_t val);
#endif
